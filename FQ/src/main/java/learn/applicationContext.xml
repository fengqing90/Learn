<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context.xsd 
							http://www.springframework.org/schema/tx 
							http://www.springframework.org/schema/tx/spring-tx.xsd
							http://www.springframework.org/schema/aop
							http://www.springframework.org/schema/aop/spring-aop.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://www.springframework.org/schema/jdbc
							http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
							http://www.springframework.org/schema/websocket 
							http://www.springframework.org/schema/websocket/spring-websocket.xsd"
	default-init-method="true">

	<!-- 启用spring注解 -->
	<context:annotation-config />
	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="*"/>
	<!-- 完成请求和注解POJO的映射 -->
<!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" /> -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="jsp/" p:suffix=".jsp" />
	<!-- 字符集 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="UTF-8" >
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="100000" />
	</bean>
	<!-- 启动切面，允许用cglib代理，类 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 启动AOP，允许用cglib代理，类 -->
	<aop:config proxy-target-class="true" />
	<!-- 启动事务，允许用cglib代理，类 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

    <websocket:message-broker>
        <websocket:stomp-endpoint path="/ws">
            <websocket:sockjs />
        </websocket:stomp-endpoint>
        <websocket:stomp-broker-relay prefix="/queue" />
    </websocket:message-broker>

<!-- 	<bean id="login" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="aop.SysLogService"/>
		<property name="target" value="aop.SysLogServiceImpl"/>
		<property name="interceptorNames" value="logAround"/>
	</bean> -->
	
	<!-- 设置 /Learn/src/aop/LogAroundInterceptor 日志方法拦截器 -->
	<aop:config>
		<aop:pointcut expression="execution(* ioc_di.impl.*.*(..))" id="logPointcut"/>
		<aop:advisor advice-ref="logAround" pointcut-ref="logPointcut"/>
	</aop:config>

   <!-- in-memory database and a datasource -->
    <jdbc:embedded-database id="dataSource" type="HSQL">
       <!--  
		<jdbc:script location="classpath:database/jpetstore-hsqldb-schema.sql"/>
		<jdbc:script location="classpath:database/jpetstore-hsqldb-dataload.sql"/> 
        -->
    </jdbc:embedded-database>
    
	
	<!-- JDBC参数配置 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="true">
		<!-- Check system properties first, before trying the specified properties.This 
			allows system properties to override any other property source. -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:/hibernate.properties</value>
			</list>
		</property>
	</bean>

	<!-- 不能很好的解决MySQL超时问题,弃用 -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
	
	<!-- ComboPooledDataSource 数据源配置
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		设置JDBC驱动名称
		<property name="driverClass" value="${jdbc.driver}" />
		设置JDBC连接URL
		<property name="jdbcUrl" value="jdbc:mysql://${dataBaseIP}:${dataBasePort}/${dataBaseName}?useUnicode=true&amp;characterEncoding=UTF-8" />
		设置数据库用户
		<property name="user" value="${dataBase.username}" />
		设置数据库用户
		<property name="password" value="${dataBase.password}" />
		连接池中保留的最小连接数。
		<property name="minPoolSize" value="5" />
		连接池中保留的最大连接数。Default: 15
		<property name="maxPoolSize" value="30" />
		初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3
		<property name="initialPoolSize" value="10" />
		最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
		<property name="maxIdleTime" value="1800" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
		<property name="acquireIncrement" value="3" />
		JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		<property name="maxStatements" value="0" />
		每60秒检查所有连接池中的空闲连接。Default: 0
		<property name="idleConnectionTestPeriod" value="60" />
		定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
		<property name="acquireRetryAttempts" value="30" />
		获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false
		<property name="breakAfterAcquireFailure" value="true" />
		因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false
		<property name="testConnectionOnCheckout" value="false" /> -->

<!-- 
		设置JDBC驱动名称
		<property name="driverClassName" value="${jdbc.driver}" />
		设置JDBC连接URL
		<property name="url" value="${jdbc.url}" />
		设置数据库用户名
		<property name="username" value="${jdbc.username}" />
		设置数据库密码
		<property name="password" value="${jdbc.password}" />
		设置连接池初始值
		<property name="initialSize" value="5" />
		设置连接池最大值
		<property name="maxActive" value="100" />
		设置连接池最小空闲值
		<property name="minIdle" value="20" />
		设置连接池最大空闲值
		<property name="maxIdle" value="50" /> -->
	<!-- </bean> -->

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<value>com.topsci.bean</value>
		</property>
		<property name="hibernateProperties">
			<value>
				javax.persistence.validation.mode=none
				hibernate.dialect=${hibernate.dialect}
				hibernate.hbm2ddl.auto=validate
				<!-- update|validate -->
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.cache.use_second_level_cache=false
				<!-- 配置二级缓存产品 -->
				<!-- hibernate.cache.provider_class=org.hibernate.cache.OSCacheProvider -->
				hibernate.cache.use_query_cache=false
				hibernate.jdbc.fetch_size=50
				hibernate.jdbc.batch_size=30
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
			</value>
		</property>
	</bean>

	<!-- 判断session是否超时 -->
<!-- 	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<bean class="com.topsci.interceptor.SessionTimeoutInterceptor"></bean>
			</list>
		</property>
	</bean> -->
</beans>